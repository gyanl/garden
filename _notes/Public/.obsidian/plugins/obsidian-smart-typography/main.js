/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const emDash = {
    matchTrigger: "-",
    matchRegExp: /--$/,
    performUpdate: (instance, delta) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 1 }, delta.to, [
            "—",
        ]);
    },
    performRevert: (instance, delta) => {
        if (instance.getRange(delta.from, delta.to) === "—") {
            delta.update(delta.from, delta.to, ["--"]);
        }
    },
};
const ellipsis = {
    matchTrigger: ".",
    matchRegExp: /\.\.\.$/,
    performUpdate: (instance, delta) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 2 }, delta.to, [
            "…",
        ]);
    },
    performRevert: (instance, delta) => {
        if (instance.getRange(delta.from, delta.to) === "…") {
            delta.update(delta.from, delta.to, ["..."]);
        }
    },
};
const openDoubleQuote = {
    matchTrigger: '"',
    matchRegExp: /(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/,
    performUpdate: (instance, delta) => {
        delta.update(delta.from, delta.to, ["“"]);
    },
    performRevert: (instance, delta) => {
        if (instance.getRange(delta.from, delta.to) === "“") {
            delta.update(delta.from, delta.to, ['"']);
        }
    },
};
const closeDoubleQuote = {
    matchTrigger: '"',
    matchRegExp: /"$/,
    performUpdate: (instance, delta) => {
        delta.update(delta.from, delta.to, ["”"]);
    },
    performRevert: (instance, delta) => {
        if (instance.getRange(delta.from, delta.to) === "”") {
            delta.update(delta.from, delta.to, ['"']);
        }
    },
};
const pairedDoubleQuote = {
    matchTrigger: '""',
    matchRegExp: /""$/,
    performUpdate: (instance, delta) => {
        delta.update(delta.from, delta.to, ["“”"]);
    },
    performRevert: (instance, delta) => {
        if (instance.getRange(delta.from, delta.to) === "“") {
            delta.update(delta.from, Object.assign(Object.assign({}, delta.to), { ch: delta.to.ch + 1 }), ['""']);
            setTimeout(() => instance.setCursor(Object.assign(Object.assign({}, delta.from), { ch: delta.from.ch + 1 })));
        }
    },
};
const openSingleQuote = {
    matchTrigger: "'",
    matchRegExp: /(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/,
    performUpdate: (instance, delta) => {
        delta.update(delta.from, delta.to, ["‘"]);
    },
    performRevert: (instance, delta) => {
        if (instance.getRange(delta.from, delta.to) === "‘") {
            delta.update(delta.from, delta.to, ["'"]);
        }
    },
};
const closeSingleQuote = {
    matchTrigger: "'",
    matchRegExp: /'$/,
    performUpdate: (instance, delta) => {
        delta.update(delta.from, delta.to, ["’"]);
    },
    performRevert: (instance, delta) => {
        if (instance.getRange(delta.from, delta.to) === "’") {
            delta.update(delta.from, delta.to, ["'"]);
        }
    },
};
const pairedSingleQuote = {
    matchTrigger: "''",
    matchRegExp: /''$/,
    performUpdate: (instance, delta) => {
        delta.update(delta.from, delta.to, ["‘’"]);
    },
    performRevert: (instance, delta) => {
        if (instance.getRange(delta.from, delta.to) === "‘") {
            delta.update(delta.from, Object.assign(Object.assign({}, delta.to), { ch: delta.to.ch + 1 }), ["''"]);
            setTimeout(() => instance.setCursor(Object.assign(Object.assign({}, delta.from), { ch: delta.from.ch + 1 })));
        }
    },
};
const emDashRules = [emDash];
const ellipsisRules = [ellipsis];
const smartQuoteRules = [
    openDoubleQuote,
    closeDoubleQuote,
    pairedDoubleQuote,
    openSingleQuote,
    closeSingleQuote,
    pairedSingleQuote,
];

const DEFAULT_SETTINGS = {
    curlyQuotes: true,
    emDash: true,
    ellipsis: true,
};
class SmartTypography extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.beforeChangeHandler = (instance, delta) => {
            if (this.lastUpdate.has(instance) && delta.origin === "+delete") {
                this.lastUpdate.get(instance).performRevert(instance, delta);
                this.lastUpdate.delete(instance);
                return;
            }
            if (delta.origin === "+input" && delta.text.length === 1) {
                const input = delta.text[0];
                const rules = this.inputRules.filter((r) => r.matchTrigger === input);
                if (rules.length === 0) {
                    if (this.lastUpdate.has(instance)) {
                        this.lastUpdate.delete(instance);
                    }
                    return;
                }
                let str = input;
                if (delta.to.ch > 0) {
                    str = `${instance.getRange({ line: delta.to.line, ch: 0 }, delta.to)}${str}`;
                }
                for (let rule of rules) {
                    if (rule.matchRegExp.test(str)) {
                        this.lastUpdate.set(instance, rule);
                        rule.performUpdate(instance, delta);
                        return;
                    }
                }
            }
            if (this.lastUpdate.has(instance)) {
                this.lastUpdate.delete(instance);
            }
        };
    }
    buildInputRules() {
        this.inputRules = [];
        if (this.settings.emDash) {
            this.inputRules.push(...emDashRules);
        }
        if (this.settings.ellipsis) {
            this.inputRules.push(...ellipsisRules);
        }
        if (this.settings.curlyQuotes) {
            this.inputRules.push(...smartQuoteRules);
        }
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.lastUpdate = new WeakMap();
            yield this.loadSettings();
            this.addSettingTab(new SmartTypographySettingTab(this.app, this));
            this.app.workspace.onLayoutReady(() => {
                this.registerCodeMirror((cm) => {
                    cm.on("beforeChange", this.beforeChangeHandler);
                });
            });
        });
    }
    onunload() {
        this.lastUpdate = null;
        this.app.workspace.iterateCodeMirrors((cm) => {
            cm.off("beforeChange", this.beforeChangeHandler);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
            this.buildInputRules();
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.buildInputRules();
            yield this.saveData(this.settings);
        });
    }
}
class SmartTypographySettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        new obsidian.Setting(containerEl)
            .setName("Curly Quotes")
            .setDesc("Double and single quotes will be converted to curly quotes (“” & ‘’)")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.curlyQuotes)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.curlyQuotes = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Em Dash")
            .setDesc("Two dashes (--) will be converted to an em dash (—)")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.emDash).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.emDash = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Ellipsis")
            .setDesc("Three periods (...) will be converted to an ellipses (…)")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.ellipsis)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ellipsis = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}

module.exports = SmartTypography;
